--- a/configure.ac	2014-05-01 20:12:22.000000000 +0900
+++ b/configure.ac	2015-02-04 19:36:02.000000000 +0900
@@ -61,6 +61,13 @@
 )
 
 AC_ARG_ENABLE(
+	[xtra-cipher-modes],
+	[AS_HELP_STRING([--disable-xtra-cipher-modes], [disable xtra cipher modes @<:@default=yes@:>@])],
+	,
+	[enable_xtra_cipher_modes="yes"]
+)
+
+AC_ARG_ENABLE(
 	[ssl],
 	[AS_HELP_STRING([--disable-ssl], [disable SSL support for TLS-based key exchange @<:@default=yes@:>@])],
 	,
@@ -777,6 +784,17 @@
 		[have_openssl_engine="no"; break]
 	)
 
+	have_openssl_xtra_cipher_modes="yes"
+	AC_CHECK_FUNCS(
+		[ \
+			EVP_aes_256_gcm \
+			EVP_aes_256_ctr \
+			EVP_aes_256_xts \
+		],
+		,
+		[have_openssl_xtra_cipher_modes="no"]
+	)
+
 	CFLAGS="${saved_CFLAGS}"
 	LIBS="${saved_LIBS}"
 fi
@@ -947,6 +965,13 @@
 		CRYPTO_SSL_LIBS="${OPENSSL_SSL_LIBS}"
 		AC_DEFINE([ENABLE_CRYPTO_OPENSSL], [1], [Use OpenSSL library])
 		test "${have_openssl_engine}" = "yes" && AC_DEFINE([HAVE_OPENSSL_ENGINE], [1], [Use crypto library])
+		if test "${enable_xtra_cipher_modes}" = "yes"; then
+			if test "${have_openssl_xtra_cipher_modes}" = "yes"; then
+				AC_DEFINE([USE_XTRA_CIPHER_MODES], [1], [Use xtra cipher modes])
+			else
+				AC_MSG_ERROR([Xtra cipher modes required but missing])
+			fi
+		fi
 		;;
 	polarssl)
 		have_crypto_crypto="${have_polarssl_crypto}"
diff -ur openvpn-2.3.2-7ubuntu3.2 openvpn-2.3.2-7ubuntu3.2+ore1
--- a/src/openvpn/crypto.c	2017-06-22 15:12:47 +0000
+++ b/src/openvpn/crypto.c	2017-06-23
@@ -94,16 +94,26 @@
   if (buf->len > 0 && opt->key_ctx_bi)
     {
       struct key_ctx *ctx = &opt->key_ctx_bi->encrypt;
+      unsigned int mode = 0;
 
       /* Do Encrypt from buf -> work */
       if (ctx->cipher)
 	{
 	  uint8_t iv_buf[OPENVPN_MAX_IV_LENGTH];
 	  const int iv_size = cipher_ctx_iv_length (ctx->cipher);
-	  const unsigned int mode = cipher_ctx_mode (ctx->cipher);
+	  const int block_size = cipher_ctx_block_size (ctx->cipher);
 	  int outlen;
 
-	  if (mode == OPENVPN_MODE_CBC)
+	  mode = cipher_ctx_mode (ctx->cipher);
+#ifdef USE_XTRA_CIPHER_MODES
+	  if (all_xtra_mode (mode))
+	    ASSERT (opt->flags & CO_USE_IV);	/* IV required */
+#endif
+	  if (mode == OPENVPN_MODE_CBC
+#ifdef USE_XTRA_CIPHER_MODES
+	      || all_xtra_mode (mode)
+#endif
+	      )
 	    {
 	      CLEAR (iv_buf);
 
@@ -134,7 +144,7 @@
 		  goto err;
 		}
 	    }
-	  else /* We only support CBC, CFB, or OFB modes right now */
+	  else /* We only support CBC, CFB, OFB, GCM, CTR or XTS modes right now */
 	    {
 	      ASSERT (0);
 	    }
@@ -153,7 +163,7 @@
 	  ASSERT (cipher_ctx_reset(ctx->cipher, iv_buf));
 
 	  /* Buffer overflow check */
-	  if (!buf_safe (&work, buf->len + cipher_ctx_block_size(ctx->cipher)))
+	  if (!buf_safe (&work, buf->len + block_size))
 	    {
 	      msg (D_CRYPT_ERRORS, "ENCRYPT: buffer size error, bc=%d bo=%d bl=%d wc=%d wo=%d wl=%d cbs=%d",
 		   buf->capacity,
@@ -162,7 +172,7 @@
 		   work.capacity,
 		   work.offset,
 		   work.len,
-		   cipher_ctx_block_size (ctx->cipher));
+		   block_size);
 	      goto err;
 	    }
 
@@ -173,7 +183,10 @@
 	  /* Flush the encryption buffer */
 	  ASSERT(cipher_ctx_final(ctx->cipher, BPTR (&work) + outlen, &outlen));
 	  work.len += outlen;
-	  ASSERT (outlen == iv_size);
+
+	  /* Some cipher modes don't need padding */
+	  if (block_size != 1)
+	    ASSERT (outlen == iv_size);
 
 	  /* prepend the IV to the ciphertext */
 	  if (opt->flags & CO_USE_IV)
@@ -197,6 +210,19 @@
 	  work = *buf;
 	}
 
+#ifdef USE_XTRA_CIPHER_MODES
+      if (aead_mode (mode))
+	{
+	  const int tag_len = aead_tag_len (mode);
+	  uint8_t* output = NULL;
+
+	  output = buf_prepend (&work, tag_len);
+	  ASSERT (output);
+	  ASSERT (cipher_ctx_get_tag (ctx->cipher, output, tag_len));
+	  dmsg (D_PACKET_CONTENT, "AEAD TAG: %s", format_hex (output, tag_len, 0, &gc));
+	}
+      else
+#endif
       /* HMAC the ciphertext (or plaintext if !cipher) */
       if (ctx->hmac)
 	{
@@ -244,7 +270,13 @@
       struct key_ctx *ctx = &opt->key_ctx_bi->decrypt;
       struct packet_id_net pin;
       bool have_pin = false;
+      const unsigned int mode = ctx->cipher ? cipher_ctx_mode (ctx->cipher) : 0;
 
+#ifdef USE_XTRA_CIPHER_MODES
+      if (aead_mode (mode))
+	; /* bypass hmac */
+      else
+#endif
       /* Verify the HMAC */
       if (ctx->hmac)
 	{
@@ -274,14 +306,27 @@
 
       if (ctx->cipher)
 	{
-	  const unsigned int mode = cipher_ctx_mode (ctx->cipher);
 	  const int iv_size = cipher_ctx_iv_length (ctx->cipher);
 	  uint8_t iv_buf[OPENVPN_MAX_IV_LENGTH];
 	  int outlen;
+#ifdef USE_XTRA_CIPHER_MODES
+	  uint8_t tag_buf[OPENVPN_AEAD_TAG_LENGTH]; /* tag of AEAD ciphertext */
+	  const int tag_len = aead_tag_len (mode);
+#endif
 
 	  /* initialize work buffer with FRAME_HEADROOM bytes of prepend capacity */
 	  ASSERT (buf_init (&work, FRAME_HEADROOM_ADJ (frame, FRAME_HEADROOM_MARKER_DECRYPT)));
 
+#ifdef USE_XTRA_CIPHER_MODES
+	  /* for AEAD ciphers, keep the tag value to feed in later */
+	  if (aead_mode (mode))
+	    {
+	      CLEAR (tag_buf);
+	      memcpy (tag_buf, BPTR (buf), tag_len);
+	      ASSERT (buf_advance (buf, tag_len));
+	      dmsg (D_PACKET_CONTENT, "AEAD TAG: %s", format_hex (tag_buf, tag_len, 0, &gc));
+	    }
+#endif
 	  /* use IV if user requested it */
 	  CLEAR (iv_buf);
 	  if (opt->flags & CO_USE_IV)
@@ -307,6 +352,11 @@
 	  if (!buf_safe (&work, buf->len))
 	    CRYPT_ERROR ("buffer overflow");
 
+#ifdef USE_XTRA_CIPHER_MODES
+	  /* feed in tag and the authenticated data for AEAD mode ciphers */
+	  if (aead_mode (mode))
+	    ASSERT (cipher_ctx_set_tag (ctx->cipher, tag_buf, tag_len));
+#endif
 	  /* Decrypt packet ID, payload */
 	  if (!cipher_ctx_update (ctx->cipher, BPTR (&work), &outlen, BPTR (buf), BLEN (buf)))
 	    CRYPT_ERROR ("cipher update failed");
@@ -322,12 +372,16 @@
 
 	  /* Get packet ID from plaintext buffer or IV, depending on cipher mode */
 	  {
-	    if (mode == OPENVPN_MODE_CBC)
+	    if (mode == OPENVPN_MODE_CBC
+#ifdef USE_XTRA_CIPHER_MODES
+		|| all_xtra_mode (mode)
+#endif
+	       )
 	      {
 		if (opt->packet_id)
 		  {
 		    if (!packet_id_read (&pin, &work, BOOL_CAST (opt->flags & CO_PACKET_ID_LONG_FORM)))
-		      CRYPT_ERROR ("error reading CBC packet-id");
+		      CRYPT_ERROR ("error reading packet-id");
 		    have_pin = true;
 		  }
 	      }
@@ -343,7 +397,7 @@
 		  CRYPT_ERROR ("error reading CFB/OFB packet-id");
 		have_pin = true;
 	      }
-	    else /* We only support CBC, CFB, or OFB modes right now */
+	    else /* We only support CBC, CFB, OFB, GCM, CTR or XTS modes right now */
 	      {
 		ASSERT (0);
 	      }
@@ -402,11 +456,17 @@
 			       bool packet_id,
 			       bool packet_id_long_form)
 {
+  unsigned int taglen = 0;
+
+#ifdef USE_XTRA_CIPHER_MODES
+  if (cipher_defined && aead_mode (cipher_kt_mode (kt->cipher)))
+    taglen = aead_tag_len (cipher_kt_mode (kt->cipher));
+#endif
   frame_add_to_extra_frame (frame,
 			    (packet_id ? packet_id_size (packet_id_long_form) : 0) +
 			    ((cipher_defined && use_iv) ? cipher_kt_iv_size (kt->cipher) : 0) +
 			    (cipher_defined ? cipher_kt_block_size (kt->cipher) : 0) + /* worst case padding expansion */
-			    kt->hmac_length);
+			    (taglen ? taglen : kt->hmac_length));
 }
 
 /*
@@ -433,6 +493,9 @@
 #ifdef ALLOW_NON_CBC_CIPHERS
 	      || (cfb_ofb_allowed && (mode == OPENVPN_MODE_CFB || mode == OPENVPN_MODE_OFB))
 #endif
+#ifdef USE_XTRA_CIPHER_MODES
+	      || all_xtra_mode (mode)
+#endif
 	      ))
 #ifdef ENABLE_SMALL
 	  msg (M_FATAL, "Cipher '%s' mode not supported", ciphername);
@@ -490,6 +553,11 @@
 	      cipher_kt_block_size(kt->cipher)*8);
 	}
     }
+#ifdef USE_XTRA_CIPHER_MODES
+  if (kt->cipher && aead_mode (cipher_kt_mode (kt->cipher)))
+    ; /* bypass hmac */
+  else
+#endif
   if (kt->digest && kt->hmac_length > 0)
     {
       ALLOC_OBJ(ctx->hmac, hmac_ctx_t);
--- a/src/openvpn/crypto.h	2014-05-01 19:35:20.000000000 +0900
+++ b/src/openvpn/crypto.h	2015-02-12 19:41:11.000000000 +0900
@@ -393,6 +393,25 @@
   return key->encrypt.cipher || key->encrypt.hmac || key->decrypt.cipher || key->decrypt.hmac;
 }
 
+#ifdef USE_XTRA_CIPHER_MODES
+static inline bool
+all_xtra_mode (const unsigned int mode)
+{
+  return mode == OPENVPN_MODE_GCM || mode == OPENVPN_MODE_CTR || mode == OPENVPN_MODE_XTS;
+}
+
+static inline bool
+aead_mode (const unsigned int mode)
+{
+  return mode == OPENVPN_MODE_GCM;
+}
+
+static inline int
+aead_tag_len (const unsigned int mode)
+{
+  return mode == OPENVPN_MODE_GCM ? OPENVPN_GCM_TAG_LENGTH : 0;
+}
+#endif
 
 #endif /* ENABLE_CRYPTO */
 #endif /* CRYPTO_H */
--- a/src/openvpn/crypto_backend.h	2013-05-31 21:00:07.000000000 +0900
+++ b/src/openvpn/crypto_backend.h	2015-02-12 19:51:02.000000000 +0900
@@ -330,6 +330,26 @@
  */
 int cipher_ctx_final (cipher_ctx_t *ctx, uint8_t *dst, int *dst_len);
 
+#ifdef USE_XTRA_CIPHER_MODES
+/**
+ * Gets the expected message authenticated code (MAC) tag for this cipher.
+ *
+ * @param ctx		The cipher's context
+ * @param tag		The expected MAC tag
+ * @param tag_size	The tag's size, in bytes.
+ */
+int cipher_ctx_get_tag (cipher_ctx_t *ctx, uint8_t* tag, int tag_len);
+
+/**
+ * Sets the expected message authenticated code (MAC) tag for this cipher.
+ *
+ * @param ctx		The cipher's context
+ * @param tag		The expected MAC tag
+ * @param tag_size	The tag's size, in bytes.
+ */
+int cipher_ctx_set_tag (cipher_ctx_t *ctx, uint8_t* tag, int tag_len);
+#endif
+
 /*
  *
  * Generic message digest information functions
diff -ur openvpn-2.3.2-7ubuntu3.2 openvpn-2.3.2-7ubuntu3.2+ore1
--- a/src/openvpn/crypto_openssl.c	2017-06-22 15:12:47 +0000
+++ b/src/openvpn/crypto_openssl.c	2017-06-23
@@ -315,7 +315,13 @@
   const char *var_key_size =
 	(EVP_CIPHER_flags (cipher) & EVP_CIPH_VARIABLE_LENGTH) ?
 	     " by default" : "";
-  const char *ssl_only = (EVP_CIPHER_mode(cipher) == EVP_CIPH_CBC_MODE) ?
+  const unsigned int mode = EVP_CIPHER_mode (cipher);
+  const char *ssl_only = (mode == EVP_CIPH_CBC_MODE
+#ifdef USE_XTRA_CIPHER_MODES
+			  || mode == EVP_CIPH_GCM_MODE || mode == EVP_CIPH_CTR_MODE
+			  || mode == EVP_CIPH_XTS_MODE
+#endif
+			 ) ?
 	"" : ", TLS client/server mode only";
 
   printf ("%s  (%d bit key%s, %d bit block%s)\n",
@@ -350,10 +356,13 @@
 	{
 	  const unsigned int mode = EVP_CIPHER_mode (cipher);
 	  if (mode == EVP_CIPH_CBC_MODE
+#ifdef USE_XTRA_CIPHER_MODES
+	      || mode == EVP_CIPH_GCM_MODE || mode == EVP_CIPH_CTR_MODE || mode == EVP_CIPH_XTS_MODE
+#endif
 #ifdef ALLOW_NON_CBC_CIPHERS
 	      || mode == EVP_CIPH_CFB_MODE || mode == EVP_CIPH_OFB_MODE
 #endif
-	      )
+	     )
 	    {
 	      cipher_list[num_ciphers++] = cipher;
 	    }
@@ -687,6 +696,19 @@
   return EVP_CipherFinal (ctx, dst, dst_len);
 }
 
+#ifdef USE_XTRA_CIPHER_MODES
+int cipher_ctx_get_tag (EVP_CIPHER_CTX *ctx, uint8_t *tag_buf, int tag_size)
+{
+  return EVP_CIPHER_CTX_ctrl (ctx, EVP_CTRL_GCM_GET_TAG, tag_size, tag_buf);
+}
+
+int
+cipher_ctx_set_tag (EVP_CIPHER_CTX *ctx, uint8_t *tag_buf, int tag_size)
+{
+  return EVP_CIPHER_CTX_ctrl (ctx, EVP_CTRL_GCM_SET_TAG, tag_size, tag_buf);
+}
+#endif
+
 
 void
 cipher_des_encrypt_ecb (const unsigned char key[DES_KEY_LENGTH],
--- a/src/openvpn/crypto_openssl.h	2014-05-01 19:35:20.000000000 +0900
+++ b/src/openvpn/crypto_openssl.h	2015-02-12 20:01:11.000000000 +0900
@@ -61,6 +61,24 @@
 /** Cipher is in CFB mode */
 #define OPENVPN_MODE_CFB 	EVP_CIPH_CFB_MODE
 
+/** Cipher is in GCM mode */
+#define OPENVPN_MODE_GCM 	EVP_CIPH_GCM_MODE
+
+/* not support CCM mode */
+
+/** Cipher is in CTR mode */
+#define OPENVPN_MODE_CTR 	EVP_CIPH_CTR_MODE
+
+/** Cipher is in XTS mode */
+#define OPENVPN_MODE_XTS 	EVP_CIPH_XTS_MODE
+
+#ifdef USE_XTRA_CIPHER_MODES
+#define OPENVPN_AEAD_TAG_LENGTH	EVP_GCM_TLS_TAG_LEN
+/** Tag length of GCM mode is 16 */
+#define OPENVPN_GCM_TAG_LENGTH	OPENVPN_AEAD_TAG_LENGTH
+/*	OPENVPN_CCM_TAG_LENGTH	12 */
+#endif
+
 /** Cipher should encrypt */
 #define OPENVPN_OP_ENCRYPT 	1
 
--- a/src/openvpn/crypto_polarssl.c	2013-05-31 21:00:07.000000000 +0900
+++ b/src/openvpn/crypto_polarssl.c	2015-02-12 20:11:15.000000000 +0900
@@ -493,6 +493,18 @@
   return 0 == retval;
 }
 
+#ifdef USE_XTRA_CIPHER_MODES
+int cipher_ctx_get_tag (cipher_ctx_t *ctx, uint8_t* tag, int tag_len)
+{
+  ASSERT (0);
+}
+
+int cipher_ctx_set_tag (cipher_ctx_t *ctx, uint8_t* tag, int tag_len)
+{
+  ASSERT (0);
+}
+#endif
+
 void
 cipher_des_encrypt_ecb (const unsigned char key[DES_KEY_LENGTH],
     unsigned char *src,
